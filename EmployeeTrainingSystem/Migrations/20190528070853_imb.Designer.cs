// <auto-generated />
using System;
using EmployeeTrainingSystem;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EmployeeTrainingSystem.Migrations
{
    [DbContext(typeof(EntityDbContext))]
    [Migration("20190528070853_imb")]
    partial class imb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EmployeeTrainingEntity.Answer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("InformationID");

                    b.Property<string>("answer");

                    b.HasKey("ID");

                    b.HasIndex("InformationID");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.ClassSchedule", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassScheduleName");

                    b.Property<string>("Site");

                    b.Property<DateTime>("Time");

                    b.HasKey("ID");

                    b.ToTable("ClassSchedule");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.CollegeClass", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Name");

                    b.Property<Guid?>("ParentIDID");

                    b.HasKey("ID");

                    b.HasIndex("ParentIDID");

                    b.ToTable("CollegeClass");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.CorrectJob", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Correctingstate");

                    b.Property<string>("Grade");

                    b.Property<DateTime>("Markhomeworktime");

                    b.Property<Guid?>("MemberId");

                    b.Property<Guid?>("PublishjobID");

                    b.Property<Guid?>("TeacherId");

                    b.HasKey("ID");

                    b.HasIndex("MemberId");

                    b.HasIndex("PublishjobID");

                    b.HasIndex("TeacherId");

                    b.ToTable("CorrectJob");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.Courseware", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Duration");

                    b.Property<int>("IMethod");

                    b.Property<string>("LinkAddress");

                    b.Property<double>("Size");

                    b.Property<Guid?>("TeachingPlanID");

                    b.Property<string>("Title");

                    b.Property<string>("Type");

                    b.HasKey("ID");

                    b.HasIndex("TeachingPlanID");

                    b.ToTable("Coursewares");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Courseware");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.Department", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("DepartmentName");

                    b.Property<string>("Phone");

                    b.HasKey("ID");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.ExamContent", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("InformationID");

                    b.Property<Guid?>("TestPaperID");

                    b.HasKey("ID");

                    b.HasIndex("InformationID");

                    b.HasIndex("TestPaperID");

                    b.ToTable("examContents");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.Information", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Answer");

                    b.Property<Guid?>("ClassScheduleID");

                    b.Property<string>("Subject");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.HasIndex("ClassScheduleID");

                    b.ToTable("Information");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte>("Accredit");

                    b.Property<string>("Avatar");

                    b.Property<DateTime>("Dateofbirth");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<bool>("Sex");

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Member");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Member");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.Publishjob", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CollegeClassID");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<Guid?>("InformationID");

                    b.Property<DateTime>("Releasetime");

                    b.Property<Guid?>("TeacherId");

                    b.HasKey("ID");

                    b.HasIndex("CollegeClassID");

                    b.HasIndex("InformationID");

                    b.HasIndex("TeacherId");

                    b.ToTable("Publishjob");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.TeachingPlan", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<int>("CourseSort");

                    b.Property<string>("Cover");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("EndDate");

                    b.Property<Guid?>("ParentID");

                    b.Property<DateTime>("StartDate");

                    b.Property<Guid?>("TeacherId");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.HasIndex("ParentID");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeachingPlans");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.TestPaper", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CollegeClassID");

                    b.Property<string>("Name");

                    b.Property<string>("Performance");

                    b.Property<Guid?>("TeacherId");

                    b.Property<string>("TestTime");

                    b.Property<DateTime>("Time");

                    b.HasKey("ID");

                    b.HasIndex("CollegeClassID");

                    b.HasIndex("TeacherId");

                    b.ToTable("TestPaper");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.TrainPlan", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<string>("Person");

                    b.Property<DateTime>("Time");

                    b.HasKey("ID");

                    b.ToTable("TrainPlan");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.TrainQualificationCertificate", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CertificateNumber");

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Person");

                    b.Property<string>("TrainingContent");

                    b.HasKey("ID");

                    b.ToTable("TrainQualificationCertificate");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.TrainRecord", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ClassScheduleNameID");

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Person");

                    b.Property<string>("Score");

                    b.Property<string>("TrainContent");

                    b.HasKey("ID");

                    b.HasIndex("ClassScheduleNameID");

                    b.ToTable("TrainRecord");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.TrainRequest", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationContent");

                    b.Property<Guid?>("ClassScheduleNameID");

                    b.Property<Guid?>("DepartmentNameID");

                    b.Property<string>("Person");

                    b.Property<int>("State");

                    b.Property<DateTime>("Time");

                    b.HasKey("ID");

                    b.HasIndex("ClassScheduleNameID");

                    b.HasIndex("DepartmentNameID");

                    b.ToTable("TrainRequest");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.TrainResource", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ClassScheduleNameID");

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Person");

                    b.Property<string>("Resourcecontent");

                    b.Property<Guid?>("TeachingDirectionId");

                    b.HasKey("ID");

                    b.HasIndex("ClassScheduleNameID");

                    b.HasIndex("TeachingDirectionId");

                    b.ToTable("TrainResource");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.LiveFiles", b =>
                {
                    b.HasBaseType("EmployeeTrainingEntity.Courseware");

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<bool>("State");

                    b.HasDiscriminator().HasValue("LiveFiles");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.Students", b =>
                {
                    b.HasBaseType("EmployeeTrainingEntity.Member");

                    b.Property<Guid?>("CollegeClassID");

                    b.HasIndex("CollegeClassID");

                    b.HasDiscriminator().HasValue("Students");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.Teacher", b =>
                {
                    b.HasBaseType("EmployeeTrainingEntity.Member");

                    b.Property<string>("Degree");

                    b.Property<string>("TeachingDirection");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.Answer", b =>
                {
                    b.HasOne("EmployeeTrainingEntity.Information", "Information")
                        .WithMany()
                        .HasForeignKey("InformationID");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.CollegeClass", b =>
                {
                    b.HasOne("EmployeeTrainingEntity.CollegeClass", "ParentID")
                        .WithMany()
                        .HasForeignKey("ParentIDID");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.CorrectJob", b =>
                {
                    b.HasOne("EmployeeTrainingEntity.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId");

                    b.HasOne("EmployeeTrainingEntity.Publishjob", "Publishjob")
                        .WithMany()
                        .HasForeignKey("PublishjobID");

                    b.HasOne("EmployeeTrainingEntity.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.Courseware", b =>
                {
                    b.HasOne("EmployeeTrainingEntity.TeachingPlan", "TeachingPlan")
                        .WithMany("Courseware")
                        .HasForeignKey("TeachingPlanID");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.ExamContent", b =>
                {
                    b.HasOne("EmployeeTrainingEntity.Information", "Information")
                        .WithMany()
                        .HasForeignKey("InformationID");

                    b.HasOne("EmployeeTrainingEntity.TestPaper", "TestPaper")
                        .WithMany()
                        .HasForeignKey("TestPaperID");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.Information", b =>
                {
                    b.HasOne("EmployeeTrainingEntity.ClassSchedule", "ClassSchedule")
                        .WithMany()
                        .HasForeignKey("ClassScheduleID");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.Publishjob", b =>
                {
                    b.HasOne("EmployeeTrainingEntity.CollegeClass", "CollegeClass")
                        .WithMany()
                        .HasForeignKey("CollegeClassID");

                    b.HasOne("EmployeeTrainingEntity.Information", "Information")
                        .WithMany()
                        .HasForeignKey("InformationID");

                    b.HasOne("EmployeeTrainingEntity.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.TeachingPlan", b =>
                {
                    b.HasOne("EmployeeTrainingEntity.TeachingPlan", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentID");

                    b.HasOne("EmployeeTrainingEntity.Member", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.TestPaper", b =>
                {
                    b.HasOne("EmployeeTrainingEntity.CollegeClass", "CollegeClass")
                        .WithMany()
                        .HasForeignKey("CollegeClassID");

                    b.HasOne("EmployeeTrainingEntity.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.TrainRecord", b =>
                {
                    b.HasOne("EmployeeTrainingEntity.ClassSchedule", "ClassScheduleName")
                        .WithMany()
                        .HasForeignKey("ClassScheduleNameID");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.TrainRequest", b =>
                {
                    b.HasOne("EmployeeTrainingEntity.ClassSchedule", "ClassScheduleName")
                        .WithMany()
                        .HasForeignKey("ClassScheduleNameID");

                    b.HasOne("EmployeeTrainingEntity.Department", "DepartmentName")
                        .WithMany()
                        .HasForeignKey("DepartmentNameID");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.TrainResource", b =>
                {
                    b.HasOne("EmployeeTrainingEntity.ClassSchedule", "ClassScheduleName")
                        .WithMany()
                        .HasForeignKey("ClassScheduleNameID");

                    b.HasOne("EmployeeTrainingEntity.Teacher", "TeachingDirection")
                        .WithMany()
                        .HasForeignKey("TeachingDirectionId");
                });

            modelBuilder.Entity("EmployeeTrainingEntity.Students", b =>
                {
                    b.HasOne("EmployeeTrainingEntity.CollegeClass", "CollegeClass")
                        .WithMany()
                        .HasForeignKey("CollegeClassID");
                });
#pragma warning restore 612, 618
        }
    }
}
